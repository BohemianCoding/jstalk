[jstalk include:"testsetup.jstalk"];

var r = NSMakeRect(1, 2, 3, 4);
var r2 = NSMakeRect(5, 6, 7, 8);
jsassert(r.origin.x == 1);

var ti = [[JSTTests alloc] init];

//print("Trying the long double");
//jsassert(55.5 == [ti nonBridgedInstanceMethodReturnAddAndReturnLongDouble:50],
//        "nonBridgedInstanceMethodReturnAddAndReturnLongDouble: failed");
jsassert(34.5 == [ti nonBridgedInstanceMethodReturnAddAndReturnDouble:20],
        "nonBridgedInstanceMethodReturnAddAndReturnDouble: failed");
jsassert(4.5 == [ti nonBridgedInstanceMethodReturnFloat], "nonBridgedInstanceMethodReturnFloat failed");
jsassert(14.5 == [ti nonBridgedInstanceMethodReturnDouble], "nonBridgedInstanceMethodReturnDouble failed");
jsassert(24.5 == [ti nonBridgedInstanceMethodReturnAddAndReturnFloat:20],
        "nonBridgedInstanceMethodReturnAddAndReturnFloat: failed");


jsassert([ti testBoolValue], "[ti testBoolValue] failed");
jsassert([JSTTests testClassBoolValue], "[JSTTests testClassBoolValue] failed");

jsassert([ti testStringValue] == "String from testStringValue", "[ti testStringValue] failed");

jsassert([JSTTests nonBridgedClassMethodReturnString] == "String from nonBridgedClassMethodReturnString",
         "[JSTTests nonBridgedClassMethodReturnString] failed");

jsassert([ti nonBridgedInstanceMethodReturnString] == "String from nonBridgedInstanceMethodReturnString",
         "[ti nonBridgedInstanceMethodReturnString] failed");


var name = NSFullUserName();
jsassert(name, "NSFullUserName failed");
jsassert((name + "").toLowerCase() == [name lowercaseString], "Lowercase stuff failed");



jsassert(([JSTTests nonBridgedClassMethodReturnInt] == 34), "nonBridgedClassMethodReturnInt failed");
jsassert(([ti nonBridgedInstanceMethodReturnInt] == 36), "nonBridgedInstanceMethodReturnInt failed");
jsassert(([JSTTests nonBridgedClassMethodAddIntTo34:2] == 36), "nonBridgedClassMethodAddIntTo34 failed");
jsassert(([ti nonBridgedInstanceMethodAddIntTo34:4] == 38), "nonBridgedInstanceMethodAddIntTo34 failed");


var nilValue = nil;
jsassert(!nilValue, "nilValue is not nil");

var randomConst = NSBundleDidLoadNotification;
jsassert(randomConst == "NSBundleDidLoadNotification", "Can't find the NSBundleDidLoadNotification const");

var boolVal = NSZombieEnabled;
jsassert(!boolVal, "Why would NSZombieEnabled be enabled?");

jsassert(NSMinYEdge == 1, "Can't find NSMinYEdge");
jsassert(CGRectMinYEdge == 1, "Can't find NSMinYEdge");


var twelve = [NSNumber numberWithInt:12];
var fifteen = twelve + 3;
jsassert(fifteen == 15, "Can't add NSNumbers to js number!");

var scriptURL = [[jstalk env] objectForKey:"scriptURL"];
scriptURL = [scriptURL lastPathComponent];
jsassert(scriptURL == "B.jstalk", "lastPathComponent failed");

var a = [[jstalk env] objectForKey:"scriptURL"] + ""
var b = [[jstalk env] objectForKey:"scriptURL"];

jsassert(a == b, "scriptURL conversions failed");

a = [ti testStringValue] + ""
b = ti.testStringValue() + "";

jsassert(a == b, "JS style method A call failed");

var twelve = NSNumber.numberWithInt(12);
var fifteen = twelve + 3;
jsassert(fifteen == 15, "JS style method B call failed!");

var twelve = NSNumber.numberWithInt_(12);
var fifteen = twelve + 3;
jsassert(fifteen == 15, "JS style method C call failed!");

NSLog("Hey! %@ %p", "What's shaking?", ti);

//print("Done with " + [jstalk env]);
